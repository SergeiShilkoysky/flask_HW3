"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∞ –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
üìå –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö –≤
—É—á–µ–±–Ω–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏.
üìå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã: "–°—Ç—É–¥–µ–Ω—Ç—ã" –∏ "–û—Ü–µ–Ω–∫–∏".
üìå –í —Ç–∞–±–ª–∏—Ü–µ "–°—Ç—É–¥–µ–Ω—Ç—ã" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id, –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –≥—Ä—É–ø–ø–∞
–∏ email.
üìå –í —Ç–∞–±–ª–∏—Ü–µ "–û—Ü–µ–Ω–∫–∏" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id, id —Å—Ç—É–¥–µ–Ω—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ
–ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –æ—Ü–µ–Ω–∫–∞.
üìå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ "–°—Ç—É–¥–µ–Ω—Ç—ã" –∏ "–û—Ü–µ–Ω–∫–∏".
üìå –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö
—Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Ö –æ—Ü–µ–Ω–æ–∫.
"""
from turtle import isvisible
from flask import Flask, render_template
from models_hw3_task3 import db, Students, Fags, Gender, Grades
from random import choice, randint, choices

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app03_s3.db'
db.init_app(app)

COUNT_FAGS = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
LIST_FAGS = ['Math', 'History', 'Linguistics', 'Jurisprudence', 'Chemistry']
COUNT_STUDENTS = COUNT_FAGS * 2
COUNT_GRADES = COUNT_STUDENTS * COUNT_FAGS


@app.route('/')
def index():
    return 'Start page'


# @app.route('/init-db/')
@app.cli.command("init-db")
def init_db():
    db.create_all()
    print('OK')
    return 'bd - create !'


# @app.route("/add-user/") # –¥–ª—è web —Ñ–æ—Ä–º—ã
@app.cli.command("add-user")
def add_user():
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã
    for _ in range(1, COUNT_FAGS + 1):
        new_fag = Fags(fag_name=choice(LIST_FAGS), isvisible=True)
        db.session.add(new_fag)
    db.session.commit()
    print('table fags added')
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    for stud in range(1, COUNT_STUDENTS + 1):
        # new_student = Students(name=f'name{stud}', last_name=f'last_name{stud}', age=stud + 20,
        #                        gender=choice(Gender.LIST_GENDER), group=choice([1, 2, 3]),
        #                        fags_id=randint(1, COUNT_FAGS), isvisible=True)

        # new_student = Students(name=f'name{stud}', last_name=f'last_name{stud}', age=stud + 20,
        #                        gender=choice([Gender.male, Gender.female]), group=choice([1, 2, 3]),
        #                        fags_id=randint(1, COUNT_FAGS))

        new_student = Students(name=f'name{stud}', last_name=f'last_name{stud}', age=stud + 20,
                               gender=choice(['male', 'female']), group=choice([1, 2, 3]),
                               fags_id=randint(1, COUNT_FAGS), isvisible=True)

        db.session.add(new_student)
    db.session.commit()
    print('table student added')
    # return 'table fags & students added !' # –¥–ª—è web —Ñ–æ—Ä–º—ã


# @app.route("/add-grades/")
@app.cli.command("add-grades")
def add_grades():
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏
    for grade in range(1, COUNT_GRADES + 1):
        new_grade = Grades(student_id=choice([student.id_ for student in Students.query.all()]),
                           course_title=choice([fags.fag_name for fags in Fags.query.all()]),
                           course_grade=choice(range(2, 10)),
                           # created_grade=Grades.created_grade,
                           isvisible=True)
        db.session.add(new_grade)
    db.session.commit()
    print('table grades added')
    # return 'table grades added !'


@app.cli.command("/del-user/<text>/")
def del_user(text):
    user = Students.query.filter_by(username='text', isvisible=False).first()
    db.session.delete(user)
    db.session.commit()
    # return f' student {text} grades deleted'


@app.route('/students/')
def get_students():
    student = Students.query.all()
    context = {'student': student}
    return render_template('index_task1.html', **context)


@app.route('/students-with-grades/')
def get_students_grades():
    student = Students.query.all()
    grades = Grades.query.all()
    context = {'student': student,
               'grades': grades}
    return render_template('grades_task3.html', **context)


if __name__ == '__main__':
    app.run(debug=True)
